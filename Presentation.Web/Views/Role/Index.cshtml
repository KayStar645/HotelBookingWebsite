@using Core.Application.Responses
@using Core.Application.ViewModels.Auth
@{
	var roles = ViewBag.list as PaginatedResult<RoleVM>;

	var permissions = ViewBag.Detail as List<PermissionDto>;
}

<style>
	.fixed-role {
		position: fixed;
		right: 0;
		top: 0;
		bottom: 0;
		overflow-y: auto;
		z-index: 1002;
		background-color: #6cd5ff;
		width: 500px;
	}

	.role-group {
		padding: 10px 20px;
		text-align: right;
		font-size: 20px;
		font-weight: bold;
		background-color: #fff;
		border-radius: 10px;
		margin-bottom: 10px;
		cursor: pointer;
	}

	.role-group:hover {
			background-color: #e7e7e7;
	}

	.role-childs {
		padding: 10px 20px;
		text-align: right;
		font-size: 16px;
		font-weight: bold;
		background-color: #fff;
		border-radius: 10px;
		margin-bottom: 10px;
		margin-top: -8px;
		cursor: pointer;
	}
</style>

@section TitleHeader
{
	<div class="row">
		<div class="col-sm-12 mt-3">
			<h3 class="page-title mt-3">
				Danh sách vai trò người dùng
			</h3>
			<div class="row mt-3">
				<div class="col-sm-4">
					<label class="font-weight-bold mb-1">Tìm kiếm</label>
					<div class="form-outline p-0" data-mdb-input-init>
						<input type="search" class="form-control" id="searchInput" placeholder="Tìm kiếm..." />
					</div>
				</div>
				<div class="col-sm-3 pe-4">
					<div class="text-right">
						<button type="button" id="create" class="btn btn-primary"
								data-toggle="modal" data-target="#openPopup">
							Thêm mới
						</button>
					</div>
				</div>
				<div class="col-sm-5">
				</div>
			</div>
		</div>
	</div>
}

<div class="row">
	<div class="col-7">
		<div class="card">
			<div class="table-responsive" style="overflow-y: auto;">
				<table class="table table-hover table-center table-striped table-bordered">
					<thead>
						<tr>
							<th class="min-vw-10"></th>
							<th class="th-sm text-nowrap">Vai trò</th>
							<th class="th-sm text-nowrap">Mô tả ngắn</th>
						</tr>
					</thead>
					<tbody id="table-body-role">
						@if (roles != null)
						{
							@foreach (var role in roles.Data)
							{
								<tr>
									<td class="text-center">
										<i class="updates fa-regular fa-pen-to-square pe-3"
										   style="color:blue;cursor: pointer;"></i>
										<i class="deletes fa-solid fa-trash" style="color:red;cursor: pointer;"></i>
									</td>
									<td class="text-center d-none" data-id="@role?.Id">@role?.Id</td>
									<td class="text-nowrap">
										@role?.Name
									</td>
									<td class="text-nowrap">
										@role?.Description
									</td>
								</tr>
							}
						}
					</tbody>
				</table>
			</div>
		</div>

		@* Phân trang *@
		<div id="paginated" class="d-flex justify-content-end mt-4">
			<nav aria-label="Page navigation example">
				<ul class="pagination">
					@for (int i = 1; i <= roles.Extra.TotalPages; i++)
					{
						<li class="page-item pageCurrent @(roles.Extra.CurrentPage == i ? "active" : "")">
							<a class="page-link" data-page="@i">@i</a>
						</li>
					}
				</ul>
			</nav>
		</div>
	</div>
</div>

<div id="detail-role" class="fixed-role d-none">
	<div class="h-100">
		<label id="modalTitle" class="font-weight-bold my-2 page-title p-2"></label>
		<div class="form-group d-none">
			<input type="text" name="id" value="" />
		</div>
		<div class="form-group">
			<label class="font-weight-bold mt-2 p-2">Tên vai trò</label>
			<input class="form-control" type="text" name="name" />
			<span class="text-danger" id="nameError"></span>
		</div>
		<div class="form-group">
			<label class="font-weight-bold p-2">Mô tả ngắn</label>
			<input class="form-control" type="text" name="description" />
			<span class="text-danger" id="descriptionError"></span>
		</div>
		<label class="font-weight-bold my-2 page-title p-2">Quyền của vai trò</label>
		@foreach (var permission in permissions)
		{
			<div class="role-permission">
				<div class="role-group">@permission.Module</div>
				<div class="role-childs d-none">
					<div class="row">
						@foreach(var action in permission.Permissions)
						{
							<div class="form-check col-2 d-flex align-items-center">
								<input class="form-check-input" type="checkbox"
									value="" id="@($"{permission.Module}-{action.Name}")"
									@(action.IsGranted == true ? "checked" : "")>
								<label class="form-check-label mb-0" for="@($"{permission.Module}-{action.Name}")">
									<span class="align-middle">@action.Name</span>
								</label>
							</div>
						}
					</div>
				</div>
			</div>
		}

		<div class="row px-3 mb-3">
			<div class="col-12">
				<div class="text-right">
					<button type="button" id="close" class="btn btn-secondary">
						Đóng
					</button>
					<button type="button" id="createButton" class="btn btn-primary">
						Thêm
					</button>
					<button type="button" id="updateButton" class="btn btn-primary">
						Cập nhật
					</button>
				</div>
			</div>
		</div>
	</div>
</div>

@* ĐÂY LÀ JS *@
@* Active menu *@
<script>
	$("#system").addClass("active");
	$("#system").next("ul").addClass("d-block");
	$("#system-role").addClass("active");

	$(".link-parent").on("click", function (e) {
		e.preventDefault();

		$(".nav-childs").removeClass("active");
		$(".link-parent").removeClass("active");

		$(".link-parent").next("ul").not($(this).next("ul")).removeClass("d-block");

		$(this).closest(".link-parent").addClass("active");
	});
</script>


@* Khởi tạo biến *@
<script>
	var createOpen = document.getElementById("create");
	var updateOpens = document.querySelectorAll(".updates");


	var nameInput = $('input[name="name"]');
	var descriptionInput = $('input[name="description"]');

	var searchTimer;
</script>


@* Tìm kiếm và lọc *@
<script>
	$(document).ready(function () {
		$('#searchInput').on('input', function () {
			clearTimeout(searchTimer);

			searchTimer = setTimeout(function () {
				performSearch();
			}, 600);
		});

		function performSearch() {
			var searchTerm = $('#searchInput').val();

			$.ajax({
				url: '/role/index',
				method: 'GET',
				data: {
					search: searchTerm,
					page: 1,
				},
				contentType: 'application/json; charset=utf-8',
				success: function (data) {
					var newData = $('<tbody>').html(data).find('#table-body-role').html();
					$('#table-body-role').html(newData);

					var newPaginated = $('<div>').html(data).find('#paginated').html();
					$('#paginated').html(newPaginated);
					resetEvent();
				},
				error: function (xhr, textStatus, errorThrown) {
					toastr.error('Lỗi khi thực hiện tìm kiếm!', 'Thông báo');
				}
			});
		}
	});
</script>

@* Lắng nghe sự kiện + load giao diện và dữ liệu *@
<script>
	function resetEvent() {
		$(document).ready(function () {
			$('.role-group').click(function () {
				$(this).next('.role-childs').toggleClass("d-none");
			});
		});

		document.getElementById("close").addEventListener("click", function (event) {
			window.location.href = "/role"
		});

		createOpen.addEventListener("click", function (event) {
			$('#detail-role').removeClass("d-none");
			var rowData = {
				id: 0,
				name: "",
				description: "",
				permissionsName: []
			};

			document.getElementById("modalTitle").innerText = "Thêm vai trò mới";
			document.getElementById("createButton").style.display = "inline-block";
			document.getElementById("updateButton").style.display = "none";

			loadData(rowData);
		});

		updateOpens = document.querySelectorAll(".updates");
		updateOpens.forEach(function (button) {
			button.addEventListener("click", function () {
				$('#detail-role').removeClass("d-none");
				
				var itemId = $(this).closest("tr").find("td[data-id]").data("id");
				var parentRow = button.closest("tr");
				var rowData = {
					id: parentRow.querySelector("td:nth-child(2)").textContent.trim(),
					name: parentRow.querySelector("td:nth-child(3)").textContent.trim(),
					description: parentRow.querySelector("td:nth-child(4)").textContent.trim(),
					permissions: []
				};

				$.ajax({
					url: "/role/detail?pId=" + itemId,
					method: "GET",
					success: function (data) {
						rowData.permissions = data.data;

						loadData(rowData);
					},
					error: function (xhr, textStatus, errorThrown) {
						toastr.error('Chi tiết vai trò lỗi!', 'Thông báo');
					}
				});
				
				document.getElementById("modalTitle").innerText = "Cập nhật vai trò";
				document.getElementById("createButton").style.display = "none";
				document.getElementById("updateButton").style.display = "inline-block";
			});
		});
		

		$(document).ready(function () {
			$(".deletes").on("click", function () {
				var itemId = $(this).closest("tr").find("td[data-id]").data("id");

				$.ajax({
					url: "/role/delete?pId=" + itemId,
					method: "DELETE",
					success: function (data) {
						if (data.success) {
							$.ajax({
								url: "/role/index",
								method: "GET",
								success: function (data) {
									var newData = $('<tbody>').html(data).find('#table-body-role').html();
									$('#table-body-role').html(newData);

									var newPaginated = $('<div>').html(data).find('#paginated').html();
									$('#paginated').html(newPaginated);

									resetEvent();
								},
							});
							toastr.success('Xoá vai trò thành công!', 'Thông báo');
						}
						else {
							toastr.error(data.errors[0], 'Thông báo');
						}
					},
					error: function (xhr, textStatus, errorThrown) {
						toastr.error('Xoá vai trò thất bại!', 'Thông báo');
					}
				});
			});
		});


		$(document).ready(function () {
			$('.pagination a').on('click', function (e) {
				e.preventDefault();
				var page = $(this).data('page');
				paginatedResult(page);
			});
		});

		function paginatedResult(page) {
			$.ajax({
				url: `/role/index?page=${page}`,
				method: 'GET',
				success: function (data) {
					var newData = $('<tbody>').html(data).find('#table-body-role').html();
					$('#table-body-role').html(newData);

					updatePagination(page);
				},
			});
		}

		function updatePagination(activePage) {
			$('.pageCurrent').removeClass('active');
			$('.pagination a[data-page="' + activePage + '"]').addClass('active').closest('.pageCurrent').addClass('active');
		}
	}



	function loadData(data) {
		document.querySelector('input[name="id"]').value = data.id;
		document.querySelector('input[name="name"]').value = data.name;
		document.querySelector('input[name="description"]').value = data.description;
		$('input[type="checkbox"]').prop('checked', false);

		if (data.permissions != undefined) {
			data.permissions.forEach(function (permission) {
				var module = permission.module.replace(/\s+/g, '\\ ');
				permission.permissions.forEach(function (child) {
					if (child.isGranted) {
						$('#' + module + '-' + child.name).prop('checked', true);
					}
				});
			});
		}

		removeValidator();
	}

	function removeValidator() {
		$(".text-danger").text("");

		nameInput.removeClass("border-danger");
		descriptionInput.removeClass("border-danger");
	}

	resetEvent();
</script>

@* Gọi controller xử lý *@
<script>
	$(document).ready(function () {
		$("#createButton").on("click", function (e) {
			e.preventDefault();

			removeValidator();

			var pRequest = getData();
			pRequest.id = 0;

			var isValid = validateForm(pRequest);

			if (isValid) {
				$.ajax({
					url: "/role/create",
					method: "POST",
					data: JSON.stringify(pRequest),
					contentType: "application/json; charset=utf-8",
					success: function (data) {
						if (data.success) {
							$.ajax({
								url: "/role/index",
								method: "GET",
								data: { page: 1 },
								contentType: "application/json; charset=utf-8",
								success: function (data) {
									var newData = $('<tbody>').html(data).find('#table-body-role').html();
									$('#table-body-role').html(newData);

									var newPaginated = $('<div>').html(data).find('#paginated').html();
									$('#paginated').html(newPaginated);

									$('#close').click();
								},
							});
							resetEvent();
							toastr.success('Thêm mới vai trò thành công!', 'Thông báo');
						} else {
							toastr.error(data.errors[0], 'Thông báo');
						}
					},
					error: function (xhr, textStatus, errorThrown) {
						toastr.error('Thêm mới vai trò thất bại!', 'Thông báo');
					}
				});
			}
		});

		$("#updateButton").on("click", function (e) {
			e.preventDefault();

			removeValidator();

			var pRequest = getData();

			var isValid = validateForm(pRequest);

			if (isValid) {
				$.ajax({
					url: "/role/update",
					method: "PUT",
					data: JSON.stringify(pRequest),
					contentType: "application/json; charset=utf-8",
					success: function (data) {
						if (data.success) {
							$.ajax({
								url: "/role/index",
								method: "GET",
								data: { page: 1 },
								contentType: "application/json; charset=utf-8",
								success: function (data) {
									var newData = $('<tbody>').html(data).find('#table-body-role').html();
									$('#table-body-role').html(newData);


									$('#close').click();
								},
							});
							resetEvent();
							toastr.success('Cập nhật vai trò thành công!', 'Thông báo');
						}
						else {
							toastr.error(data.errors[0], 'Thông báo');
						}
					},
					error: function (xhr, textStatus, errorThrown) {
						toastr.error('Cập nhật vai trò thất bại!', 'Thông báo');
					}
				});
			}
		});
	});

	function getData() {
		var formData = {
			id: $('input[name="id"]').val() || null,
			name: $('input[name="name"]').val() || null,
			description: $('input[name="description"]').val() || null,
			permissionsName: []
		};

		$('.role-permission').each(function() {
			if (!$(this).hasClass('d-none')) {
				var module = $(this).find('.role-group').text().trim();
				$(this).find('.form-check-input:checked').each(function() {
					var actionName = $(this).siblings('.form-check-label').find('span').text().trim();
					formData.permissionsName.push(module + '-' + actionName);
				});
			}
		});

		return formData;
	}

	function validateForm(data) {
		var isValid = true;

		if (!data.name) {
			$("#nameError").text("Vai trò không được để trống");
			$('input[name="name"]').addClass("border-danger");
			isValid = false;
		} else if (data.name.length > 100) {
			$("#nameError").text("Tên vai trò không được vượt quá 100 ký tự.");
			$('input[name="name"]').addClass("border-danger");
			isValid = false;
		}

		return isValid;
	}
</script>